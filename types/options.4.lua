--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- string (default: @,48-57,_,192-255
-- 				Vi default: @,48-57,_)
-- 			local to buffer
-- 	Keywords are used in searching and recognizing with many commands:
-- 	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
-- 	'isfname' for a description of the format of this option.  For '@'
-- 	characters above 255 check the "word" character class.
-- 	For C programs you could use "a-z,A-Z,48-57,_,.,-,>".
-- 	For a help file it is set to all non-blank printable characters except
-- 	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
-- 	command).
-- 	When the 'lisp' option is on the '-' character is always included.
-- 	This option also influences syntax highlighting, unless the syntax
-- 	uses |:syn-iskeyword|.
vim.bo.iskeyword = "@,48-57,_,192-255"
-- number	(default: 10000)
-- 			local to buffer
-- 	Maximum number of lines kept beyond the visible screen. Lines at the
-- 	top are deleted if new lines exceed this limit.
-- 	Minimum is 1, maximum is 100000.
-- 	Only in |terminal| buffers.
vim.bo.scrollback = "-1"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used for Insert mode completion
-- 	with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|
-- 	See |complete-functions| for an explanation of how the function is
-- 	invoked and what it should return.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.completefunc = ""
-- string	(default ":Man", Windows: ":help")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |K| command.  Environment variables are
-- 	expanded |:set_env|.  ":help" may be used to access the Vim internal
-- 	help.  (Note that previously setting the global option to the empty
-- 	value did this, which is now deprecated.)
-- 	When the first character is ":", the command is invoked as a Vim
-- 	command prefixed with [count].
-- 	When "man" or "man -s" is used, Vim will automatically translate
-- 	a [count] for the "K" command to a section number.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Example: >
-- 		:set keywordprg=man\ -s
-- 		:set keywordprg=:Man
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.keywordprg = ":Man"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used for Insert mode omni
-- 	completion with CTRL-X CTRL-O. |i_CTRL-X_CTRL-O|
-- 	See |complete-functions| for an explanation of how the function is
-- 	invoked and what it should return.
-- 	This option is usually set by a filetype plugin:
-- 	|:filetype-plugin-on|
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.omnifunc = ""
-- string	(default on Unix: ".,/usr/include,,"
-- 				   other systems: ".,,")
-- 			global or local to buffer |global-local|
-- 	This is a list of directories which will be searched when using the
-- 	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
-- 	provided that the file being searched for has a relative path (not
-- 	starting with "/", "./" or "../").  The directories in the 'path'
-- 	option may be relative or absolute.
-- 	- Use commas to separate directory names: >
-- 		:set path=.,/usr/local/include,/usr/include
-- <	- Spaces can also be used to separate directory names (for backwards
-- 	  compatibility with version 3.0).  To have a space in a directory
-- 	  name, precede it with an extra backslash, and escape the space: >
-- 		:set path=.,/dir/with\\\ space
-- <	- To include a comma in a directory name precede it with an extra
-- 	  backslash: >
-- 		:set path=.,/dir/with\\,comma
-- <	- To search relative to the directory of the current file, use: >
-- 		:set path=.
-- <	- To search in the current directory use an empty string between two
-- 	  commas: >
-- 		:set path=,,
-- <	- A directory name may end in a ':' or '/'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- When using |netrw.vim| URLs can be used.  For example, adding
-- 	  "http://www.vim.org" will make ":find index.html" work.
-- 	- Search upwards and downwards in a directory tree using "*", "**" and
-- 	  ";".  See |file-searching| for info and syntax.
-- 	- Careful with '\' characters, type two to get one in the option: >
-- 		:set path=.,c:\\include
-- <	  Or just use '/' instead: >
-- 		:set path=.,c:/include
-- <	Don't forget "." or files won't even be found in the same directory as
-- 	the file!
-- 	The maximum length is limited.  How much depends on the system, mostly
-- 	it is something like 256 or 1024 characters.
-- 	You can check if all the include files are found, using the value of
-- 	'path', see |:checkpath|.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.  To remove the current directory use: >
-- 		:set path-=
-- <	To add the current directory use: >
-- 		:set path+=
-- <	To use an environment variable, you probably need to replace the
-- 	separator.  Here is an example to append $INCL, in which directory
-- 	names are separated with a semi-colon: >
-- 		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
-- <	Replace the ';' with a ':' or whatever separator is used.  Note that
-- 	this doesn't work when $INCL contains a comma or white space.
vim.bo.path = ".,/usr/include,,"
-- boolean	(default off)
-- 			local to buffer
-- 	This option should be set before editing a binary file.  You can also
-- 	use the |-b| Vim argument.  When this option is switched on a few
-- 	options will be changed (also when it already was on):
-- 		'textwidth'  will be set to 0
-- 		'wrapmargin' will be set to 0
-- 		'modeline'   will be off
-- 		'expandtab'  will be off
-- 	Also, 'fileformat' and 'fileformats' options will not be used, the
-- 	file is read and written like 'fileformat' was "unix" (a single <NL>
-- 	separates lines).
-- 	The 'fileencoding' and 'fileencodings' options will not be used, the
-- 	file is read without conversion.
-- 	NOTE: When you start editing a(nother) file while the 'bin' option is
-- 	on, settings from autocommands may change the settings again (e.g.,
-- 	'textwidth'), causing trouble when editing.  You might want to set
-- 	'bin' again when the file has been loaded.
-- 	The previous values of these options are remembered and restored when
-- 	'bin' is switched from on to off.  Each buffer has its own set of
-- 	saved option values.
-- 	To edit a file with 'binary' set you can use the |++bin| argument.
-- 	This avoids you have to do ":set bin", which would have effect for all
-- 	files you edit.
-- 	When writing a file the <EOL> for the last line is only written if
-- 	there was one in the original file (normally Vim appends an <EOL> to
-- 	the last line if there is none; this would make the file longer).  See
-- 	the 'endofline' option.
vim.bo.binary = "false"
-- boolean	(Vim default: on (off for root),
-- 				 Vi default: off)
-- 			local to buffer
-- 	If 'modeline' is on 'modelines' gives the number of lines that is
-- 	checked for set commands.  If 'modeline' is off or 'modelines' is zero
-- 	no lines are checked.  See |modeline|.
vim.bo.modeline = "true"
-- string	(default "\")
-- 			local to buffer
-- 	The characters that are used to escape quotes in a string.  Used for
-- 	objects like a', a" and a` |a'|.
-- 	When one of the characters in this option is found inside a string,
-- 	the following character will be skipped.  The default value makes the
-- 	text "foo\"bar\\" considered to be one string.
vim.bo.quoteescape = "\\"
-- string	(default "en")
-- 			local to buffer
-- 	A comma separated list of word list names.  When the 'spell' option is
-- 	on spellchecking will be done for these languages.  Example: >
-- 		set spelllang=en_us,nl,medical
-- <	This means US English, Dutch and medical words are recognized.  Words
-- 	that are not recognized will be highlighted.
-- 	The word list name must consist of alphanumeric characters, a dash or
-- 	an underscore.  It should not include a comma or dot.  Using a dash is
-- 	recommended to separate the two letter language name from a
-- 	specification.  Thus "en-rare" is used for rare English words.
-- 	A region name must come last and have the form "_xx", where "xx" is
-- 	the two-letter, lower case region name.  You can use more than one
-- 	region by listing them: "en_us,en_ca" supports both US and Canadian
-- 	English, but not words specific for Australia, New Zealand or Great
-- 	Britain. (Note: currently en_au and en_nz dictionaries are older than
-- 	en_ca, en_gb and en_us).
-- 	If the name "cjk" is included East Asian characters are excluded from
-- 	spell checking.  This is useful when editing text that also has Asian
-- 	words.
-- 							*E757*
-- 	As a special case the name of a .spl file can be given as-is.  The
-- 	first "_xx" in the name is removed and used as the region name
-- 	(_xx is an underscore, two letters and followed by a non-letter).
-- 	This is mainly for testing purposes.  You must make sure the correct
-- 	encoding is used, Vim doesn't check it.
-- 	How the related spell files are found is explained here: |spell-load|.
vim.bo.spelllang = "en"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used to perform tag searches.
-- 	The function gets the tag pattern and should return a List of matching
-- 	tags.  See |tag-function| for an explanation of how to write the
-- 	function and an example.
vim.bo.tagfunc = ""
-- boolean	(default off)
-- 			local to buffer
-- 	Copy the structure of the existing lines indent when autoindenting a
-- 	new line.  Normally the new indent is reconstructed by a series of
-- 	tabs followed by spaces as required (unless |'expandtab'| is enabled,
-- 	in which case only spaces are used).  Enabling this option makes the
-- 	new line copy whatever characters were used for indenting on the
-- 	existing line.  'expandtab' has no effect on these characters, a Tab
-- 	remains a Tab.  If the new indent is greater than on the existing
-- 	line, the remaining space is filled in the normal manner.
-- 	See 'preserveindent'.
vim.bo.copyindent = "false"
-- string	(default "")
-- 			local to buffer
-- 	Comma separated list of suffixes, which are used when searching for a
-- 	file for the "gf", "[I", etc. commands.  Example: >
-- 		:set suffixesadd=.java
-- <
-- 				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
vim.bo.suffixesadd = ""
-- string	(default "grep -n ",
-- 				 Unix: "grep -n $* /dev/null")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |:grep| command.  This option may contain '%'
-- 	and '#' characters, which are expanded like when used in a command-
-- 	line.  The placeholder "$*" is allowed to specify where the arguments
-- 	will be included.  Environment variables are expanded |:set_env|.  See
-- 	|option-backslash| about including spaces and backslashes.
-- 	When your "grep" accepts the "-H" argument, use this to make ":grep"
-- 	also work well with a single file: >
-- 		:set grepprg=grep\ -nH
-- <	Special value: When 'grepprg' is set to "internal" the |:grep| command
-- 	works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
-- 	|:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
-- 	See also the section |:make_makeprg|, since most of the comments there
-- 	apply equally to 'grepprg'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.grepprg = "grep -n $* /dev/null"
-- string	(default "")
-- 			local to buffer
-- 	Name of a keyboard mapping.  See |mbyte-keymap|.
-- 	Setting this option to a valid keymap name has the side effect of
-- 	setting 'iminsert' to one, so that the keymap becomes effective.
-- 	'imsearch' is also set to one, unless it was -1
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.keymap = ""
-- string (default: "")
-- 			local to buffer
-- 	When this option is set, the FileType autocommand event is triggered.
-- 	All autocommands that match with the value of this option will be
-- 	executed.  Thus the value of 'filetype' is used in place of the file
-- 	name.
-- 	Otherwise this option does not always reflect the current file type.
-- 	This option is normally set when the file type is detected.  To enable
-- 	this use the ":filetype on" command. |:filetype|
-- 	Setting this option to a different value is most useful in a modeline,
-- 	for a file for which the file type is not automatically recognized.
-- 	Example, for in an IDL file:
-- 		/* vim: set filetype=idl : */ ~
-- 	|FileType| |filetypes|
-- 	When a dot appears in the value then this separates two filetype
-- 	names.  Example:
-- 		/* vim: set filetype=c.doxygen : */ ~
-- 	This will use the "c" filetype first, then the "doxygen" filetype.
-- 	This works both for filetype plugins and for syntax files.  More than
-- 	one dot may appear.
-- 	This option is not copied to another buffer, independent of the 's' or
-- 	'S' flag in 'cpoptions'.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.filetype = ""
-- string	(default: ".,w,b,u,t")
-- 			local to buffer
-- 	This option specifies how keyword completion |ins-completion| works
-- 	when CTRL-P or CTRL-N are used.  It is also used for whole-line
-- 	completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion
-- 	and the places to scan.  It is a comma separated list of flags:
-- 	.	scan the current buffer ('wrapscan' is ignored)
-- 	w	scan buffers from other windows
-- 	b	scan other loaded buffers that are in the buffer list
-- 	u	scan the unloaded buffers that are in the buffer list
-- 	U	scan the buffers that are not in the buffer list
-- 	k	scan the files given with the 'dictionary' option
-- 	kspell  use the currently active spell checking |spell|
-- 	k{dict}	scan the file {dict}.  Several "k" flags can be given,
-- 		patterns are valid too.  For example: >
-- 			:set cpt=k/usr/dict/*,k~/spanish
-- <	s	scan the files given with the 'thesaurus' option
-- 	s{tsr}	scan the file {tsr}.  Several "s" flags can be given, patterns
-- 		are valid too.
-- 	i	scan current and included files
-- 	d	scan current and included files for defined name or macro
-- 		|i_CTRL-X_CTRL-D|
-- 	]	tag completion
-- 	t	same as "]"
vim.bo.complete = ".,w,b,u,t"
-- boolean	(default off)
-- 			local to buffer
-- 	When on, Vim automatically saves undo history to an undo file when
-- 	writing a buffer to a file, and restores undo history from the same
-- 	file on buffer read.
-- 	The directory where the undo file is stored is specified by 'undodir'.
-- 	For more information about this feature see |undo-persistence|.
-- 	The undo file is not read when 'undoreload' causes the buffer from
-- 	before a reload to be saved for undo.
-- 	When 'undofile' is turned off the undo file is NOT deleted.
vim.bo.undofile = "false"
-- string	(default "/*%s*/")
-- 			local to buffer
-- 	A template for a comment.  The "%s" in the value is replaced with the
-- 	comment text.  Currently only used to add markers for folding, see
-- 	|fold-marker|.
vim.bo.commentstring = "/*%s*/"
-- number	(default 1000)
-- 			global or local to buffer |global-local|
-- 	Maximum number of changes that can be undone.  Since undo information
-- 	is kept in memory, higher numbers will cause more memory to be used
-- 	(nevertheless, a single change can use an unlimited amount of memory).
-- 	Set to 0 for Vi compatibility: One level of undo and "u" undoes
-- 	itself: >
-- 		set ul=0
-- <	But you can also get Vi compatibility by including the 'u' flag in
-- 	'cpoptions', and still be able to use CTRL-R to repeat undo.
-- 	Also see |undo-two-ways|.
-- 	Set to -1 for no undo at all.  You might want to do this only for the
-- 	current buffer: >
-- 		setlocal ul=-1
-- <	This helps when you run out of memory for a single change.
vim.bo.undolevels = "1000"
-- number	(default 0)
-- 			local to buffer
-- 	Number of characters from the right window border where wrapping
-- 	starts.  When typing text beyond this limit, an <EOL> will be inserted
-- 	and inserting continues on the next line.
-- 	Options that add a margin, such as 'number' and 'foldcolumn', cause
-- 	the text width to be further reduced.  This is Vi compatible.
-- 	When 'textwidth' is non-zero, this option is not used.
-- 	See also 'formatoptions' and |ins-textwidth|.
vim.bo.wrapmargin = "0"
-- boolean	(default on)
-- 			local to buffer
-- 	When off the buffer contents cannot be changed.  The 'fileformat' and
-- 	'fileencoding' options also can't be changed.
-- 	Can be reset on startup with the |-M| command line argument.
vim.bo.modifiable = "true"
-- string	(default "0{,0},0),0],:,0#,!^F,o,O,e")
-- 			local to buffer
-- 	A list of keys that, when typed in Insert mode, cause reindenting of
-- 	the current line.  Only happens if 'indentexpr' isn't empty.
-- 	The format is identical to 'cinkeys', see |indentkeys-format|.
-- 	See |C-indenting| and |indent-expression|.
vim.bo.indentkeys = "0{,0},0),0],:,0#,!^F,o,O,e"
-- boolean	(default off)
-- 			local to buffer
-- 	When on, the buffer is considered to be modified.  This option is set
-- 	when:
-- 	1. A change was made to the text since it was last written.  Using the
-- 	   |undo| command to go back to the original text will reset the
-- 	   option.  But undoing changes that were made before writing the
-- 	   buffer will set the option again, since the text is different from
-- 	   when it was written.
-- 	2. 'fileformat' or 'fileencoding' is different from its original
-- 	   value.  The original value is set when the buffer is read or
-- 	   written.  A ":set nomodified" command also resets the original
-- 	   values to the current values and the 'modified' option will be
-- 	   reset.
-- 	   Similarly for 'eol' and 'bomb'.
-- 	This option is not set when a change is made to the buffer as the
-- 	result of a BufNewFile, BufRead/BufReadPost, BufWritePost,
-- 	FileAppendPost or VimLeave autocommand event.  See |gzip-example| for
-- 	an explanation.
-- 	When 'buftype' is "nowrite" or "nofile" this option may be set, but
-- 	will be ignored.
-- 	Note that the text may actually be the same, e.g. 'modified' is set
-- 	when using "rA" on an "A".
vim.bo.modified = "false"
-- boolean	(default off)
-- 			local to buffer
-- 	Lisp mode: When <Enter> is typed in insert mode set the indent for
-- 	the next line to Lisp standards (well, sort of).  Also happens with
-- 	"cc" or "S".  'autoindent' must also be on for this to work.  The 'p'
-- 	flag in 'cpoptions' changes the method of indenting: Vi compatible or
-- 	better.  Also see 'lispwords'.
-- 	The '-' character is included in keyword characters.  Redefines the
-- 	"=" operator to use this same indentation algorithm rather than
-- 	calling an external program if 'equalprg' is empty.
-- 	This option is not used when 'paste' is set.
vim.bo.lisp = "false"
-- number	(default 8)
-- 			local to buffer
-- 	Number of spaces that a <Tab> in the file counts for.  Also see
-- 	|:retab| command, and 'softtabstop' option.
vim.bo.tabstop = "8"
-- number	(default 8)
-- 			local to buffer
-- 	Number of spaces to use for each step of (auto)indent.  Used for
-- 	|'cindent'|, |>>|, |<<|, etc.
-- 	When zero the 'ts' value will be used.  Use the |shiftwidth()|
-- 	function to get the effective shiftwidth value.
vim.bo.shiftwidth = "8"
-- string	(default "")
-- 			local to buffer
-- 			{only available when compiled with the |+vartabs|
-- 			feature}
-- 	A list of the number of spaces that a <Tab> counts for while editing,
-- 	such as inserting a <Tab> or using <BS>.  It "feels" like variable-
-- 	width <Tab>s are being inserted, while in fact a mixture of spaces
-- 	and <Tab>s is used.  Tab widths are separated with commas, with the
-- 	final value applying to all subsequent tabs.
vim.bo.varsofttabstop = ""
-- string	(default "[.?!]\_[\])'" \t]\+")
-- 			local to buffer
-- 	Pattern to locate the end of a sentence.  The following word will be
-- 	checked to start with a capital letter.  If not then it is highlighted
-- 	with SpellCap |hl-SpellCap| (unless the word is also badly spelled).
-- 	When this check is not wanted make this option empty.
-- 	Only used when 'spell' is set.
-- 	Be careful with special characters, see |option-backslash| about
-- 	including spaces and backslashes.
-- 	To set this option automatically depending on the language, see
-- 	|set-spc-auto|.
vim.bo.spellcapcheck = "[.?!]\\_[\\])'\"\9 ]\\+"
